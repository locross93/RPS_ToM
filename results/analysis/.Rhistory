'Previous outcome, \nprevious transition-HM (hyp=3)' = 'gray25',
'Previous outcome, \nprevious transition-HM default (hyp=5)' = 'gray50',
'Previous outcome, \nprevious transition-HM (hyp=7)' = 'gray75',
'Previous outcome, \nprevious transition-HM (hyp=9)' = 'gray100'
)
opponent_lookup = c(
'human' = 'Humans',
'hm_gpt4o' = 'HM default (hyp=5)',
'hm_gpt4o_1' = 'HM (hyp=1)',
'hm_gpt4o_3' = 'HM (hyp=3)',
'hm_gpt4o_7' = 'HM (hyp=7)',
'hm_gpt4o_9' = 'HM (hyp=9)'
)
opponent_levels = c(
'Humans',
'HM (hyp=1)',
'HM (hyp=3)',
'HM default (hyp=5)',
'HM (hyp=7)',
'HM (hyp=9)'
)
model_subset = gpt_data |>
filter(tom_agent_class == 'hm_gpt4o', sequential_agent_class %in% bot_levels, tom_agent_softmax_temp == 0.2) |>
group_by(tom_agent_class, sequential_agent_class, tom_agent_num_hypotheses) |>
summarize(
mean_win_rate = mean(win_percentage),
seeds = n(),
se_win_rate = sd(win_percentage) / sqrt(n())
) |>
ungroup() |>
rename(
bot_strategy_str = sequential_agent_class,
opponent = tom_agent_class
) |>
rowwise() |>
mutate(
bot_strategy_str = factor(TOM_AGENT_STRATEGY_LOOKUP[[bot_strategy_str]],
levels = STRATEGY_LABELS)
)
model_subset |> print(n=100)
# Make num_hypothesis classes
model_subset$opponent[model_subset$opponent == 'hm_gpt4o' & model_subset$tom_agent_num_hypotheses == 1] = 'hm_gpt4o_1'
model_subset$opponent[model_subset$opponent == 'hm_gpt4o' & model_subset$tom_agent_num_hypotheses == 3] = 'hm_gpt4o_3'
model_subset$opponent[model_subset$opponent == 'hm_gpt4o' & model_subset$tom_agent_num_hypotheses == 7] = 'hm_gpt4o_7'
model_subset$opponent[model_subset$opponent == 'hm_gpt4o' & model_subset$tom_agent_num_hypotheses == 9] = 'hm_gpt4o_9'
# Combine human and model subset data
summary_data = human_summary |>
bind_rows(
model_subset
) |>
rowwise() |>
mutate(
opponent = factor(opponent_lookup[[opponent]],
levels = opponent_levels)
)
# Figure
num_hypotheses_comparison = summary_data |>
ggplot(
aes(
x = bot_strategy_str,
y = mean_win_rate,
color = opponent,
fill = paste(bot_strategy_str, opponent, sep = '-')
)
) +
geom_bar(
stat = 'identity',
position = position_dodge(0.9),
width = 0.7,
# alpha = 0.5
) +
geom_errorbar(
aes(
ymin = mean_win_rate - se_win_rate,
ymax = mean_win_rate + se_win_rate,
color = opponent
# color = paste(opponent, bot_strategy_str, sep = '-')
),
position = position_dodge(width = 0.9), # NB: needs to match position above
linewidth = 0.5,
width = 0,
# color = 'black'
) +
# chance line
geom_hline(
yintercept = 1/3,
linewidth = 0.5,
linetype = 'dashed',
color = 'black'
) +
# noise ceiling
geom_hline(
yintercept = 0.9,
linewidth = 0.5,
linetype = 'dashed',
color = 'black'
) +
scale_y_continuous(
name = 'win rate',
breaks = seq(0, 1.0, by = 0.25),
labels = seq(0, 1.0, by = 0.25),
limits = c(0, 1.0)
) +
scale_x_discrete(
name = element_blank()
) +
scale_fill_manual(
values = color_lookup
) +
scale_color_manual(
values = c('black', 'black', 'black', 'black')
) +
DEFAULT_PLOT_THEME +
theme(
legend.position = 'none',
axis.text.x = element_text(size = 14),
)
num_hypotheses_comparison
# Figure
num_hypotheses_comparison = summary_data |>
ggplot(
aes(
x = bot_strategy_str,
y = mean_win_rate,
color = opponent,
fill = paste(bot_strategy_str, opponent, sep = '-')
)
) +
geom_bar(
stat = 'identity',
position = position_dodge(0.9),
width = 0.7,
# alpha = 0.5
) +
geom_errorbar(
aes(
ymin = mean_win_rate - se_win_rate,
ymax = mean_win_rate + se_win_rate,
color = opponent
# color = paste(opponent, bot_strategy_str, sep = '-')
),
position = position_dodge(width = 0.9), # NB: needs to match position above
linewidth = 0.5,
width = 0,
# color = 'black'
) +
# chance line
geom_hline(
yintercept = 1/3,
linewidth = 0.5,
linetype = 'dashed',
color = 'black'
) +
# noise ceiling
geom_hline(
yintercept = 0.9,
linewidth = 0.5,
linetype = 'dashed',
color = 'black'
) +
scale_y_continuous(
name = 'win rate',
breaks = seq(0, 1.0, by = 0.25),
labels = seq(0, 1.0, by = 0.25),
limits = c(0, 1.0)
) +
scale_x_discrete(
name = element_blank()
) +
scale_fill_manual(
values = color_lookup
) +
scale_color_manual(
values = c('black', 'black', 'black', 'black', 'black', 'black')
) +
DEFAULT_PLOT_THEME +
theme(
legend.position = 'none',
axis.text.x = element_text(size = 14),
)
num_hypotheses_comparison
# Save figure
ggsave(
num_hypotheses_comparison,
filename = 'num_hypotheses_comparison.pdf',
path = FIGURE_PATH,
device = cairo_pdf,
width = 20,
height = 7,
)
?scale_fill_grey
# Keep human colors
grey.colors(4, start = 0.8, end = 0.2)
# Keep human colors
grey.colors(3, start = 0.8, end = 0.2)
color_lookup = c(
'Self-transition (+)-Humans' = COLORS[1], #'#440154'
'Self-transition (+)-HM (hyp=9)' = 'black',
'Self-transition (+)-HM (hyp=7)' = '#333333',
'Self-transition (+)-HM default (hyp=5)' = '#989898',
'Self-transition (+)-HM (hyp=3)' = '#CCCCCC',
'Self-transition (+)-HM (hyp=1)' = 'white',
'Self-transition (−)-Humans' = COLORS[2], # '#443a83'
'Self-transition (−)-HM (hyp=9)' = 'black',
'Self-transition (−)-HM (hyp=7)' = '#333333',
'Self-transition (−)-HM default (hyp=5)' = '#989898',
'Self-transition (−)-HM (hyp=3)' = '#CCCCCC',
'Self-transition (−)-HM (hyp=1)' = 'white',
'Opponent-transition (+)-Humans' = COLORS[3], # '#31688e'
'Opponent-transition (+)-HM (hyp=9)' = 'black',
'Opponent-transition (+)-HM (hyp=7)' = '#333333',
'Opponent-transition (+)-HM default (hyp=5)' = '#989898',
'Opponent-transition (+)-HM (hyp=3)' = '#CCCCCC',
'Opponent-transition (+)-HM (hyp=1)' = 'white',
'Opponent-transition (0)-Humans' = COLORS[4], # '#21908c'
'Opponent-transition (0)-HM (hyp=9)' = 'black',
'Opponent-transition (0)-HM (hyp=7)' = '#333333',
'Opponent-transition (0)-HM default (hyp=5)' = '#989898',
'Opponent-transition (0)-HM (hyp=3)' = '#CCCCCC',
'Opponent-transition (0)-HM (hyp=1)' = 'white',
'Previous outcome \n(W0L+T−)-Humans' = COLORS[5], # '#35b779'
'Previous outcome \n(W0L+T−)-HM (hyp=9)' = 'black',
'Previous outcome \n(W0L+T−)-HM (hyp=7)' = '#333333',
'Previous outcome \n(W0L+T−)-HM default (hyp=5)' = '#989898',
'Previous outcome \n(W0L+T−)-HM (hyp=3)' = '#CCCCCC',
'Previous outcome \n(W0L+T−)-HM (hyp=1)' = 'white',
'Previous outcome \n(W+L−T0)-Humans' = COLORS[6], # '#8fd744'
'Previous outcome \n(W+L−T0)-HM (hyp=9)' = 'black',
'Previous outcome \n(W+L−T0)-HM (hyp=7)' = '#333333',
'Previous outcome \n(W+L−T0)-HM default (hyp=5)' = '#989898',
'Previous outcome \n(W+L−T0)-HM (hyp=3)' = '#CCCCCC',
'Previous outcome \n(W+L−T0)-HM (hyp=1)' = 'white',
'Previous outcome, \nprevious transition-Humans' = COLORS[7], # '#fde725'
'Previous outcome, \nprevious transition-HM (hyp=9)' = 'black',
'Previous outcome, \nprevious transition-HM (hyp=7)' = '#333333',
'Previous outcome, \nprevious transition-HM default (hyp=5)' = '#989898',
'Previous outcome, \nprevious transition-HM (hyp=3)' = '#CCCCCC',
'Previous outcome, \nprevious transition-HM (hyp=1)' = 'white'
)
opponent_lookup = c(
'human' = 'Humans',
'hm_gpt4o_1' = 'HM (hyp=1)',
'hm_gpt4o_3' = 'HM (hyp=3)',
'hm_gpt4o' = 'HM default (hyp=5)',
'hm_gpt4o_7' = 'HM (hyp=7)',
'hm_gpt4o_9' = 'HM (hyp=9)'
)
opponent_levels = c(
'Humans',
'HM (hyp=1)',
'HM (hyp=3)',
'HM default (hyp=5)',
'HM (hyp=7)',
'HM (hyp=9)'
)
model_subset = gpt_data |>
filter(tom_agent_class == 'hm_gpt4o', sequential_agent_class %in% bot_levels, tom_agent_softmax_temp == 0.2) |>
group_by(tom_agent_class, sequential_agent_class, tom_agent_num_hypotheses) |>
summarize(
mean_win_rate = mean(win_percentage),
seeds = n(),
se_win_rate = sd(win_percentage) / sqrt(n())
) |>
ungroup() |>
rename(
bot_strategy_str = sequential_agent_class,
opponent = tom_agent_class
) |>
rowwise() |>
mutate(
bot_strategy_str = factor(TOM_AGENT_STRATEGY_LOOKUP[[bot_strategy_str]],
levels = STRATEGY_LABELS)
)
model_subset |> print(n=100)
# Make num_hypothesis classes
model_subset$opponent[model_subset$opponent == 'hm_gpt4o' & model_subset$tom_agent_num_hypotheses == 1] = 'hm_gpt4o_1'
model_subset$opponent[model_subset$opponent == 'hm_gpt4o' & model_subset$tom_agent_num_hypotheses == 3] = 'hm_gpt4o_3'
model_subset$opponent[model_subset$opponent == 'hm_gpt4o' & model_subset$tom_agent_num_hypotheses == 7] = 'hm_gpt4o_7'
model_subset$opponent[model_subset$opponent == 'hm_gpt4o' & model_subset$tom_agent_num_hypotheses == 9] = 'hm_gpt4o_9'
# Combine human and model subset data
summary_data = human_summary |>
bind_rows(
model_subset
) |>
rowwise() |>
mutate(
opponent = factor(opponent_lookup[[opponent]],
levels = opponent_levels)
)
# Figure
num_hypotheses_comparison = summary_data |>
ggplot(
aes(
x = bot_strategy_str,
y = mean_win_rate,
color = opponent,
fill = paste(bot_strategy_str, opponent, sep = '-')
)
) +
geom_bar(
stat = 'identity',
position = position_dodge(0.9),
width = 0.7,
# alpha = 0.5
) +
geom_errorbar(
aes(
ymin = mean_win_rate - se_win_rate,
ymax = mean_win_rate + se_win_rate,
color = opponent
# color = paste(opponent, bot_strategy_str, sep = '-')
),
position = position_dodge(width = 0.9), # NB: needs to match position above
linewidth = 0.5,
width = 0,
# color = 'black'
) +
# chance line
geom_hline(
yintercept = 1/3,
linewidth = 0.5,
linetype = 'dashed',
color = 'black'
) +
# noise ceiling
geom_hline(
yintercept = 0.9,
linewidth = 0.5,
linetype = 'dashed',
color = 'black'
) +
scale_y_continuous(
name = 'win rate',
breaks = seq(0, 1.0, by = 0.25),
labels = seq(0, 1.0, by = 0.25),
limits = c(0, 1.0)
) +
scale_x_discrete(
name = element_blank()
) +
scale_fill_manual(
values = color_lookup
) +
scale_color_manual(
values = c('black', 'black', 'black', 'black', 'black', 'black')
) +
DEFAULT_PLOT_THEME +
theme(
legend.position = 'none',
axis.text.x = element_text(size = 14),
)
num_hypotheses_comparison
# Save figure
ggsave(
num_hypotheses_comparison,
filename = 'num_hypotheses_comparison.pdf',
path = FIGURE_PATH,
device = cairo_pdf,
width = 20,
height = 7,
)
# Sanity check: seeds per agent class / opponent
gpt_data |>
group_by(tom_agent_class, sequential_agent_class, tom_agent_softmax_temp, tom_agent_num_hypotheses) |>
summarize(seeds = n()) |>
print(n = 200)
# Sanity check: seeds per agent class / opponent for each num_hypotheses
gpt_data |>
filter(tom_agent_class == 'hm_gpt4o', sequential_agent_class %in% bot_levels, tom_agent_num_hypotheses == 5) |>
group_by(tom_agent_class, sequential_agent_class, tom_agent_softmax_temp, tom_agent_num_hypotheses) |>
summarize(seeds = n()) |>
print(n=200)
color_lookup = c(
'Self-transition (+)-Humans' = COLORS[1], #'#440154'
'Self-transition (+)-HM (noise=0.2)' = 'black',
'Self-transition (+)-HM (noise=1)' = 'white',
'Self-transition (−)-Humans' = COLORS[2], # '#443a83'
'Self-transition (−)-HM (noise=0.2)' = 'black',
'Self-transition (−)-HM (noise=1)' = 'white',
'Opponent-transition (+)-Humans' = COLORS[3], # '#31688e'
'Opponent-transition (+)-HM (noise=0.2)' = 'black',
'Opponent-transition (+)-HM (noise=1)' = 'white',
'Opponent-transition (0)-Humans' = COLORS[4], # '#21908c'
'Opponent-transition (0)-HM (noise=0.2)' = 'black',
'Opponent-transition (0)-HM (noise=1)' = 'white',
'Previous outcome \n(W0L+T−)-Humans' = COLORS[5], # '#35b779'
'Previous outcome \n(W0L+T−)-HM (noise=0.2)' = 'black',
'Previous outcome \n(W0L+T−)-HM (noise=1)' = 'white',
'Previous outcome \n(W+L−T0)-Humans' = COLORS[6], # '#8fd744'
'Previous outcome \n(W+L−T0)-HM (noise=0.2)' = 'black',
'Previous outcome \n(W+L−T0)-HM (noise=1)' = 'white',
'Previous outcome, \nprevious transition-Humans' = COLORS[7], # '#fde725'
'Previous outcome, \nprevious transition-HM (noise=0.2)' = 'black',
'Previous outcome, \nprevious transition-HM (noise=1)' = 'white'
)
opponent_lookup = c(
'human' = 'Humans',
'hm_gpt4o_0.2' = 'HM (noise=0.2)',
'hm_gpt4o_1' = 'HM (noise=1)'
)
opponent_levels = c(
'Humans',
'HM (noise=0.2)',
'HM (noise=1)'
)
model_subset = gpt_data |>
filter(tom_agent_class == 'hm_gpt4o', sequential_agent_class %in% bot_levels, tom_agent_num_hypotheses == 5) |>
group_by(tom_agent_class, sequential_agent_class, tom_agent_softmax_temp) |>
summarize(
mean_win_rate = mean(win_percentage),
seeds = n(),
se_win_rate = sd(win_percentage) / sqrt(n())
) |>
ungroup() |>
rename(
bot_strategy_str = sequential_agent_class,
opponent = tom_agent_class
) |>
rowwise() |>
mutate(
bot_strategy_str = factor(TOM_AGENT_STRATEGY_LOOKUP[[bot_strategy_str]],
levels = STRATEGY_LABELS)
)
model_subset |> print(n=100)
# Make num_hypothesis classes
model_subset$opponent[model_subset$opponent == 'hm_gpt4o' & model_subset$tom_agent_softmax_temp == 0.2] = 'hm_gpt4o_0.2'
model_subset$opponent[model_subset$opponent == 'hm_gpt4o' & model_subset$tom_agent_softmax_temp == 1] = 'hm_gpt4o_1'
# Combine human and model subset data
summary_data = human_summary |>
bind_rows(
model_subset
) |>
rowwise() |>
mutate(
opponent = factor(opponent_lookup[[opponent]],
levels = opponent_levels)
)
summary_data
# Sanity check
summary_data |> print(n=100)
# Figure
softmax_temp_comparison = summary_data |>
ggplot(
aes(
x = bot_strategy_str,
y = mean_win_rate,
color = opponent,
fill = paste(bot_strategy_str, opponent, sep = '-')
)
) +
geom_bar(
stat = 'identity',
position = position_dodge(0.9),
width = 0.7,
# alpha = 0.5
) +
geom_errorbar(
aes(
ymin = mean_win_rate - se_win_rate,
ymax = mean_win_rate + se_win_rate,
color = opponent
# color = paste(opponent, bot_strategy_str, sep = '-')
),
position = position_dodge(width = 0.9), # NB: needs to match position above
linewidth = 0.5,
width = 0,
# color = 'black'
) +
# chance line
geom_hline(
yintercept = 1/3,
linewidth = 0.5,
linetype = 'dashed',
color = 'black'
) +
# noise ceiling
geom_hline(
yintercept = 0.9,
linewidth = 0.5,
linetype = 'dashed',
color = 'black'
) +
scale_y_continuous(
name = 'win rate',
breaks = seq(0, 1.0, by = 0.25),
labels = seq(0, 1.0, by = 0.25),
limits = c(0, 1.0)
) +
scale_x_discrete(
name = element_blank()
) +
scale_fill_manual(
values = color_lookup
) +
scale_color_manual(
values = c('black', 'black', 'black', 'black', 'black', 'black')
) +
DEFAULT_PLOT_THEME +
theme(
legend.position = 'none',
axis.text.x = element_text(size = 14),
)
softmax_temp_comparison
# Save figure
ggsave(
softmax_temp_comparison,
filename = 'softmax_temp_comparison.pdf',
path = FIGURE_PATH,
device = cairo_pdf,
width = 20,
height = 7,
)
